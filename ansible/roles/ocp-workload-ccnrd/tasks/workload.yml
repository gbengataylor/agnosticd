---
# Implement your Workload deployment tasks here

- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Setting up num_users for workshop
  debug:
    msg: "Setting up num_users for workshop num_users = {{ num_users }}"

- name: Setting up module_type for workshop
  debug:
    msg: "Setting up module_type for workshop module_type = {{ module_type }}"

- name: Transfer codeready archive binary
  copy:
    src=../files/codeready-workspaces-2.0.0-crwctl-linux-x64.tar.gz dest=/tmp/codeready.tar.gz

- name: Check crwctl is installed
  shell: command -v crwctl >/dev/null 2>&1
  register: result
  ignore_errors: yes

- name: Extract codeready archive binary
  shell: tar -zxvf /tmp/codeready.tar.gz -C /opt/
  become: true
  when: "{{ result.rc }} != 0"

- name: Symlink codeready archive binary
  shell: ln -s /opt/crwctl/bin/crwctl /usr/bin/crwctl
  become: true
  when: "{{ result.rc }} != 0"

- name: Transfer executable script script
  copy:
    src=../files/preparelab_ccn.sh dest=/tmp/preparelab_ccn.sh mode=0777

- name: Execute the preparelab_ccn.sh
  shell: /tmp/preparelab_ccn.sh -c {{ num_users }} -m {{ module_type }}

# Install CodeReady Workspaces
# - name: Deploy CodeReady Workspaces
#   command: "../files/codeready-workspaces-operator-installer/deploy.sh --deploy --oauth --project=labs-infra"
#   register: cmd_result
#   changed_when: true
#
# - name: Get CodeReady Workspaces URL
#   command: "oc get routes codeready --template={% raw %}'{{ .spec.host }}'{% endraw %} -n {{ namespace }}"
#   register: cmd_result
#   changed_when: true
#
# - name: init 'codeready_url' variable
#   set_fact:
#     codeready_url: "{{ cmd_result.stdout }}"
#
# - name: get RHSSO URL
#   command: "oc get routes keycloak --template={% raw %}'{{ .spec.host }}'{% endraw %} -n {{ namespace }}"
#   register: cmd_result
#   changed_when: true
#
# - name: init 'rhsso_url' variable
#   set_fact:
#     rhsso_url: "{{ cmd_result.stdout }}"
#
# - name: wait for CodeReady Workspaces to be running
#   uri:
#     url: "http://{{ codeready_url }}/api/system/state"
#     status_code: 200
#   register: result
#   until: result.status == 200
#   retries: 60
#   delay: 30

- name: Remove the preparelab_ccn.sh
  file: path=/tmp/preparelab_ccn.sh state=absent

# get ingress host
- name: Get ingress host
  k8s_facts:
    api_version: v1
    kind: Service
    name: router-default
    namespace: openshift-ingress
  register: r_router_default

- name: Show ingress object
  debug:
    msg: "Ingress object: {{ r_router_default }}"

- name: Show ingress host name
  debug:
    msg: "Ingress hostname: {{ r_router_default.resources[0].status.loadBalancer.ingress[0].hostname }}"

# Fix AWS ELB connection timeout
- name: Get ELB name
  become_user: ec2-user
  shell: |
    sudo -u ec2-user aws elb describe-load-balancers --region {{ aws_region }} | jq  '.LoadBalancerDescriptions |
      map(select( .DNSName == "{{ r_router_default.resources[0].status.loadBalancer.ingress[0].hostname }}"))' |
      jq -r '.[0].LoadBalancerName'
  register: lbname

- name: Show load balancer name
  debug:
    msg: "Load balancer name: {{ lbname.stdout }}"

- name: Fix load balancer
  become_user: ec2-user
  shell: |
    sudo -u ec2-user aws elb modify-load-balancer-attributes --region {{ aws_region }} --load-balancer-name {{ lbname.stdout }} --load-balancer-attributes "{\"ConnectionSettings\":{\"IdleTimeout\":300}}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
